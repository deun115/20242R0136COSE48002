name: App Deployment

on:
  push:
    branches:
      - main
    paths:
      - app/**

env:
  API_URL: ${{secrets.API_URL}}
  TRACEAPI: ${{secrets.TRACEAPI}}
  TRACEAPIKEY: ${{secrets.TRACEAPIKEY}}
  WEB_APIKEY: ${{secrets.WEB_APIKEY}}
  WEB_APPID: ${{secrets.WEB_APPID}}
  WEB_MESSAGING: ${{secrets.WEB_MESSAGING}}
  WEB_PROJECTID: ${{secrets.WEB_PROJECTID}}
  WEB_AUTHDOMAIN: ${{secrets.WEB_AUTHDOMAIN}}
  WEB_STORAGEBUCKET: ${{secrets.WEB_STORAGEBUCKET}}
  WEB_MEASUREMENTID: ${{secrets.WEB_MEASUREMENTID}}
  ANDROID_APIKEY: ${{secrets.ANDROID_APIKEY}}
  ANDROID_APPID: ${{secrets.ANDROID_APPID}}
  ANDROID_MESSAGING: ${{secrets.ANDROID_MESSAGING}}
  ANDROID_PROJECTID: ${{secrets.ANDROID_PROJECTID}}
  ANDROID_STORAGEBUCKET: ${{secrets.ANDROID_STORAGEBUCKET}}
  IOS_APIKEY: ${{secrets.IOS_APIKEY}}
  IOS_APPID: ${{secrets.IOS_APPID}}
  IOS_MESSAGING: ${{secrets.IOS_MESSAGING}}
  IOS_PROJECTID: ${{secrets.IOS_PROJECTID}}
  IOS_STORAGEBUCKET: ${{secrets.IOS_STORAGEBUCKET}}
  IOS_BUNDLEID: ${{secrets.IOS_BUNDLEID}}
  MACOS_APIKEY: ${{secrets.MACOS_APIKEY}}
  MACOS_APPID: ${{secrets.MACOS_APPID}}
  MACOS_MESSAGING: ${{secrets.MACOS_MESSAGING}}
  MACOS_PROJECTID: ${{secrets.MACOS_PROJECTID}}
  MACOS_STORAGEBUCKET: ${{secrets.MACOS_STORAGEBUCKET}}
  MACOS_BUNDLEID: ${{secrets.MACOS_BUNDLEID}}
  PROJECT_NUMBER: ${{secrets.PROJECT_NUMBER}}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'  # 특정 버전 지정 (최신 안정 버전으로 변경 가능)
          channel: 'stable'

      - name: Set Environment variables
        run: |
          cd app/structure
          echo "API_URL=$API_URL" >> .env
          echo "TRACEAPI=$TRACEAPI" >> .env
          echo "TRACEAPIKEY=$TRACEAPIKEY" >> .env
          echo "WEB_APIKEY=$WEB_APIKEY" >> .env
          echo "WEB_APPID=$WEB_APPID" >> .env
          echo "WEB_MESSAGING=$WEB_MESSAGING" >> .env
          echo "WEB_PROJECTID=$WEB_PROJECTID" >> .env
          echo "WEB_AUTHDOMAIN=$WEB_AUTHDOMAIN" >> .env
          echo "WEB_STORAGEBUCKET=$WEB_STORAGEBUCKET" >> .env
          echo "WEB_MEASUREMENTID=$WEB_MEASUREMENTID" >> .env
          echo "ANDROID_APIKEY=$ANDROID_APIKEY" >> .env
          echo "ANDROID_APPID=$ANDROID_APPID" >> .env
          echo "ANDROID_MESSAGING=$ANDROID_MESSAGING" >> .env
          echo "ANDROID_PROJECTID=$ANDROID_PROJECTID" >> .env
          echo "ANDROID_STORAGEBUCKET=$ANDROID_STORAGEBUCKET" >> .env
          echo "IOS_APIKEY=$IOS_APIKEY" >> .env
          echo "IOS_APPID=$IOS_APPID" >> .env
          echo "IOS_MESSAGING=$IOS_MESSAGING" >> .env
          echo "IOS_PROJECTID=$IOS_PROJECTID" >> .env
          echo "IOS_STORAGEBUCKET=$IOS_STORAGEBUCKET" >> .env
          echo "IOS_BUNDLEID=$IOS_BUNDLEID" >> .env
          echo "MACOS_APIKEY=$MACOS_APIKEY" >> .env
          echo "MACOS_APPID=$MACOS_APPID" >> .env
          echo "MACOS_MESSAGING=$MACOS_MESSAGING" >> .env
          echo "MACOS_PROJECTID=$MACOS_PROJECTID" >> .env
          echo "MACOS_STORAGEBUCKET=$MACOS_STORAGEBUCKET" >> .env
          echo "MACOS_BUNDLEID=$MACOS_BUNDLEID" >> .env
          echo "PROJECT_NUMBER=$PROJECT_NUMBER" >> .env
          cd ../../

      - name: Set google-service JSON
        env:
          google-service: ${{secrets.GOOGLE_SERVICES}}
        run: |
          cd app/structure/android/app
          echo "$google-service" > google-services.json
          cd ../../../../

      - name: Install dependencies
        run: |
          cd app/structure
          flutter pub get

      - name: Build APK
        run: |
          cd app/structure
          flutter build apk

      - name: Upload Generated APK to Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: app/structure/build/app/outputs/apk/release/app-release.apk
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload APK to S3
        run: |
          aws s3 cp app/structure/build/app/outputs/flutter-apk/app-release.apk s3://${{ secrets.FLUTTER_S3_BUCKET_NAME }}/app-release-${{ github.sha }}.apk
          
      - name: Create download URL
        run: |
          echo "Download URL: https://${{ secrets.FLUTTER_S3_BUCKET_NAME }}.s3.amazonaws.com/app-release-${{ github.sha }}.apk" >> $GITHUB_STEP_SUMMARY